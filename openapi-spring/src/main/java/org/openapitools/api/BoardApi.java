/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Mark;
import org.openapitools.model.Status;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import es.unex.asee.models.Movimiento;
import es.unex.asee.repositories.MovimientoRepository;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-06T20:59:53.831107+02:00[Europe/Madrid]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Gameplay", description = "the Gameplay API")
public interface BoardApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /board : Get the whole board
     * Retrieves the current state of the board and the winner.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getBoard",
        summary = "Get the whole board",
        description = "Retrieves the current state of the board and the winner.",
        tags = { "Gameplay" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class))
            })
        },
        security = {
            @SecurityRequirement(name = "app2AppOauth", scopes={ "board:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/board",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Status> getBoard(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"winner\" : \".\", \"tablero\" : [ [ \".\", \".\", \".\" ], [ \".\", \".\", \".\" ], [ \".\", \".\", \".\" ] ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /board/{row}/{column} : Get a single board square
     * Retrieves the requested square.
     *
     * @param row Board row (vertical coordinate) (required)
     * @param column Board column (horizontal coordinate) (required)
     * @return OK (status code 200)
     *         or The provided parameters are incorrect (status code 400)
     */
    @Operation(
        operationId = "getSquare",
        summary = "Get a single board square",
        description = "Retrieves the requested square.",
        tags = { "Gameplay" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Mark.class)),
                @Content(mediaType = "text/html", schema = @Schema(implementation = Mark.class))
            }),
            @ApiResponse(responseCode = "400", description = "The provided parameters are incorrect", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication"),
            @SecurityRequirement(name = "user2AppOauth", scopes={ "board:read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/board/{row}/{column}",
        produces = { "application/json", "text/html" }
    )
    
    default ResponseEntity<Mark> getSquare(
        @Min(1) @Max(3) @Parameter(name = "row", description = "Board row (vertical coordinate)", required = true, in = ParameterIn.PATH) @PathVariable("row") Integer row,
        @Min(1) @Max(3) @Parameter(name = "column", description = "Board column (horizontal coordinate)", required = true, in = ParameterIn.PATH) @PathVariable("column") Integer column
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "\".\"";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /board/{row}/{column} : Set a single board square
     * Places a mark on the board and retrieves the whole board and the winner (if any).
     *
     * @param row Board row (vertical coordinate) (required)
     * @param column Board column (horizontal coordinate) (required)
     * @param body  (required)
     * @return OK (status code 200)
     *         or The provided parameters are incorrect (status code 400)
     */
    @Operation(
        operationId = "putSquare",
        summary = "Set a single board square",
        description = "Places a mark on the board and retrieves the whole board and the winner (if any).",
        tags = { "Gameplay" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Status.class)),
                @Content(mediaType = "text/html", schema = @Schema(implementation = Status.class))
            }),
            @ApiResponse(responseCode = "400", description = "The provided parameters are incorrect", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerHttpAuthentication"),
            @SecurityRequirement(name = "user2AppOauth", scopes={ "board:write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/board/{row}/{column}",
        produces = { "application/json", "text/html" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Status> putSquare(
        @Min(1) @Max(3) @Parameter(name = "row", description = "Board row (vertical coordinate)", required = true, in = ParameterIn.PATH) @PathVariable("row") Integer row,
        @Min(1) @Max(3) @Parameter(name = "column", description = "Board column (horizontal coordinate)", required = true, in = ParameterIn.PATH) @PathVariable("column") Integer column,
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"winner\" : \".\", \"board\" : [ [ \".\", \".\", \".\" ], [ \".\", \".\", \".\" ], [ \".\", \".\", \".\" ] ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
